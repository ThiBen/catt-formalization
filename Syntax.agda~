{-# OPTIONS --rewriting #-}

-- open import Prelude
open import Agda.Builtin.Equality
open import Agda.Builtin.Nat


module Syntax where
  
  data Ctx      : Set
  data Sub      : Ctx → Ctx → Set

  ⅀ : Nat → Ctx
  𝔻 : Nat → Ctx

  record Ty (Γ : Ctx) : Set where
    inductive
    constructor ⇒_[_]
    field
      dim : Nat
      def : Sub Γ (⅀ dim)
  
  open Ty public
  
  data Tm       : ∀ Γ → Ty Γ → Set

  _[_]T : ∀ {Γ Δ} (A : Ty Δ) (δ : Sub Γ Δ) → Ty Γ 
  _[_]t : ∀ {Γ Δ} {A : Ty Δ} (t : Tm Δ A) (δ : Sub Γ Δ) → Tm Γ (A [ δ ]T) 

  data Ctx where
    ∙      : Ctx
    _,_    : ∀ Γ → Ty Γ → Ctx

      
  data Sub where
    ε      : ∀ {Γ} → Sub Γ ∙
    _○_    : ∀ {Γ Δ Θ} → Sub Δ Θ → Sub Γ Δ → Sub Γ Θ
    _,_    : ∀ {Γ Δ} (δ : Sub Γ Δ) {A} → Tm Γ (A [ δ ]T) → Sub Γ (Δ , A)
    id     : ∀ {Γ} → Sub Γ Γ
    π₁     : ∀ {Γ Δ A} → Sub Γ (Δ , A) → Sub Γ Δ
  
  A [ δ ]T = ⇒ dim A [ (def A) ○ δ ]

  
  data Tm where
    π₂_[_] : ∀ {Γ Δ} A → (δ : Sub Γ (Δ , A)) → Tm Γ (A [ π₁ δ ]T)

  Tydef : ∀ (Γ : Ctx) (n : Nat) → Set
  Tydef Γ n = Sub Γ (⅀ n)

  -- Ty= : ∀ {Γ : Con} {m n : Nat} (p : m == n) {A : Tydef Γ m} {B : Tydef Γ n} (q : A == B [ Tydef Γ ↓ p ]) → ⇒ m [ A ] == ⇒ n [ B ] 
  -- Ty= idp q = ap ⇒ _ [_] q

  -- Ty=transp : ∀ {Γ : Con} {m n : ℕ} (p : m == n) {A : Tydef Γ m} {B : Tydef Γ n} (q : transport (Tydef Γ) p A == B) → ⇒ m [ A ] == ⇒ n [ B ]
  -- Ty=transp {Γ = Γ} p q = Ty= p (from-transp (Tydef Γ) p q)  

  -- ,=transp : ∀ {Γ Δ : Con} {δ₀ δ₁ : Tms Γ Δ} (p : δ₀ == δ₁) {A : Ty Δ} {t₀ : Tm Γ (A [ δ₀ ]T)} {t₁ : Tm Γ (A [ δ₁ ]T)} (q :  t₁ == transport (λ σ → Tm Γ (A [ σ ]T)) p t₀) →  _==_ {A = Tms Γ (Δ , A)} (δ₀ , t₀) (δ₁ , t₁)
  -- ,=transp {Γ} idp idp = idp  



-- transp○ : ∀ {m n Γ Δ} {δ : Tms Δ (⅀ m)} {σ : Tms Γ Δ} (p : m == n) → transport (Tydef Γ) p (δ ○ σ) == ((transport (Tydef Δ) p δ) ○ σ)  
  -- transp○ idp = idp


  -- postulate
    -- id○    : ∀ {Γ Δ} {δ : Tms Γ Δ} → (id ○ δ) == δ 
    -- ○id    : ∀ {Γ Δ} {δ : Tms Γ Δ} → (δ ○ id) == δ  
    -- ass    : ∀ {Γ Δ Θ Ξ} {ν : Tms Γ Δ} {δ : Tms Δ Θ} {σ : Tms Θ Ξ} → ((σ ○ δ) ○ ν) == (σ ○ (δ ○ ν))
    -- π₁○    : ∀ {Γ Δ Θ A} {σ : Tms Γ Δ} {δ : Tms Δ (Θ , A)} → (π₁ (δ ○ σ)) == (π₁ δ ○ σ) 

  -- Tynf :  ∀ {Γ : Con} (A : Ty Γ) → A == ⇒ dim A [ def A ]
  -- Tynf ⇒ dim₁ [ def₁ ] = idp
  -- {-# REWRITE Tynf #-}

  [][]T  : ∀ {Γ Δ Θ : Ctx} {A : Ty Θ} {δ : Sub Δ Θ} {σ : Sub Γ Δ} →  ((A [ δ ]T) [ σ ]T)  (A [ δ ○ σ ]T)
--  [][]T {A = A} = ap (λ σ → ⇒ dim A [ σ ]) ass
  [][]T = ?
  {-# REWRITE [][]T #-}
  

  -- _[_]t {Γ = Γ} (π₂ A [ δ₁ ]) δ = transport (λ σ  → (Tm Γ ⇒ dim A [ σ ])) (_∙_ (ap (λ σ → def A ○ σ) π₁○) (! ass)) (π₂ A [ δ₁ ○ δ ]) 
  _[_]t {Γ = Γ} (π₂ A [ δ₁ ]) δ = {!!} -- coe {!A!} π₂ A [ δ₁ ○ δ ]

  postulate
   -- ,○      : ∀ {Γ Δ Θ} {σ : Tms Γ Δ} {δ : Tms Δ Θ} {A : Ty Θ} {t : Tm Δ (A [ δ ]T)} → _==_ {A = Tms Γ (Θ , A)} ((δ , t) ○ σ) ((δ ○ σ) , transport (Tm Γ) ([][]T A) (t [ σ ]t))
    π₁β    : ∀ {Γ Δ} {δ : Sub Γ Δ} {A} {t : Tm Γ (A [ δ ]T)} → (π₁ {A = A} (δ , t) == δ)
    πη     : ∀ {Γ Δ} {A} {δ : Sub Γ (Δ , A)} → (π₁ δ , π₂ A [ δ ]) == δ
    εη     : ∀ {Γ} {σ : Sub Γ ∙} → σ == ε



  𝔻 n = ⅀ n , (⇒ n [ id ])
  ⅀ O = ∙
  ⅀ (suc n) = 𝔻 n , (⇒ n [ π₁ id ])


  varTy :  Ctx → Nat → Set
  varTy Γ n = Sub Γ (𝔻 n)


  verif  : ∀ {Γ : Ctx} {A : Ty Γ} → (A [ id ]T) == A
  -- verif {A = A} = ap (λ σ → ⇒ dim A [ σ ]) ○id
  verif = ?

