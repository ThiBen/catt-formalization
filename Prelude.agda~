{-# OPTIONS --rewriting #-}

module Prelude where

  open import Agda.Primitive public
  open import Agda.Builtin.Equality

  record ⊤ : Set where
    constructor tt

  {-# BUILTIN UNIT ⊤ #-}
  
  record Σ {i j} (A : Set i) (B : A → Set j) : Set (i ⊔ j) where
    constructor _,_
    field
      fst : A
      snd : B fst 

  open Σ public

  is-contr : ∀ {i} → Set i → Set i
  is-contr A = Σ A (λ x → ((y : A) → y ≡ x))
  
  _×_ : ∀ {i j} (A : Set i) (B : Set j) → Set (i ⊔ j)
  A × B = Σ A (λ _ -> B)
    
  Σ! : ∀ {i j} (A : Set i) (B : A → Set j) → Set (i ⊔ j)  
  Σ! A B = (Σ A B) × (is-contr (Σ A B)) 

  
  uncurry : ∀ {i j k} {A : Set i} {B : A → Set j} {C : Set k} →
            (φ : (a : A) → (b : B a) → C) →
            Σ A B → C
  uncurry φ (a , b) = φ a b            

  curry : ∀ {i j k} {A : Set i} {B : A → Set j} {C : Set k} →
          (ψ : Σ A B → C) →
          (a : A) → (b : B a) → C
  curry ψ a b = ψ (a , b)

